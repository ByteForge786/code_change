import pandas as pd
import numpy as np

# Sample DataFrame
data = {
    'col1': [1, 2, None, 4, 5],
    'col2': [None, None, None, None, None],  # Entire column is null
    'col3': [None, 8, 9, 'd', 'f']
}
df = pd.DataFrame(data)

# Function to check if a value is NaN or None
def is_nan_or_none(value):
    return pd.isna(value) or value is None

# Create a new DataFrame to store non-null values
new_df = pd.DataFrame()

# Iterate over each column
for col in df.columns:
    # Extract non-null values for the column
    non_null_values = df[col].dropna().head(5)
    
    # If all values in the original column are null, add NaN values
    if df[col].apply(is_nan_or_none).all():
        non_null_values = pd.Series([np.nan] * 5)
    
    # Add non-null values to the new DataFrame
    new_df[col] = non_null_values

# Display the new DataFrame
print(new_df)


import pandas as pd
import numpy as np

# Sample DataFrame
data = {
    'col1': [1, 2, None, 4, 5],
    'col2': [6, None, 8, 9, 10],
    'col3': [11, 12, 13, 14, 15]
}
df = pd.DataFrame(data)

# Create a new DataFrame with exactly 5 records, filling missing values with NaN
new_df = pd.DataFrame()

for col in df.columns:
    non_null_values = df[col].dropna().reset_index(drop=True)
    null_count = 5 - len(non_null_values)
    nan_values = pd.Series([np.nan] * null_count)
    new_df[col] = pd.concat([non_null_values, nan_values], ignore_index=True)

# Display the new DataFrame
print(new_df)
